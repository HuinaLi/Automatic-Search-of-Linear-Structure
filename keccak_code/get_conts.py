#-------------------------------------------------------------------------------
# Name:     Keccak224/256/384/512
# Purpose:  Generate all contraints in CNF form -->list
#           All CNFconsists of three parts: 
#           1. initial state CNF (generete using keccak_optimal_ls.py),
#           2. sbox and Constraint CNF (using get_allcons_cnf.py), 
#           3. Objective Function CNF (using PySat,https://pysathq.github.io/) 
# Author:   Anonymous
# Created:  30-11-2022
# Version:  1st
#-------------------------------------------------------------------------------
from sage.all import *
from copy import copy, deepcopy
from sage.rings.polynomial.pbori.pbori import *
from sage.rings.polynomial.pbori import *
from random import randint
from sympy.logic import POSform
from sympy import symbols
from itertools import product

######## A_x,y,z & G_x,z & D_x,z ##############
## 1.  column has 2 bit positions that can be chosen as variable [A_i,...,A_j, G_x,z, D_x,z]
# 2
Col_1 = [
    [0,0,0],
    [1,1,0]
]

# 5
Col_2 = [
    [0,0,0,0],
    [1,0,1,0],
    [0,1,1,0],
    [1,1,1,0],
    [1,1,0,1]
]


# 1+3+2*(c(3,2)+1) =12
Col_3 = [
    [0, 0, 0, 0, 0], 
    [1, 0, 0, 1, 0], 
    [0, 1, 0, 1, 0], 
    [1, 1, 0, 1, 0], 
    [0, 0, 1, 1, 0], 
    [1, 0, 1, 1, 0], 
    [0, 1, 1, 1, 0], 
    [1, 1, 1, 1, 0],  
    [1, 1, 0, 0, 1], 
    [1, 0, 1, 0, 1], 
    [0, 1, 1, 0, 1], 
    [1, 1, 1, 0, 1]
]


# 1+4+2*(c(4,2)+c(4,3)+1)=27
Col_4 = [
    [0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 0],
    [0, 1, 0, 0, 1, 0], 
    [1, 1, 0, 0, 1, 0], 
    [0, 0, 1, 0, 1, 0],
    [1, 0, 1, 0, 1, 0], 
    [0, 1, 1, 0, 1, 0], 
    [1, 1, 1, 0, 1, 0], 
    [0, 0, 0, 1, 1, 0], 
    [1, 0, 0, 1, 1, 0], 
    [0, 1, 0, 1, 1, 0], 
    [1, 1, 0, 1, 1, 0], 
    [0, 0, 1, 1, 1, 0], 
    [1, 0, 1, 1, 1, 0], 
    [0, 1, 1, 1, 1, 0], 
    [1, 1, 1, 1, 1, 0], 
    [1, 1, 0, 0, 0, 1], 
    [1, 0, 1, 0, 0, 1], 
    [0, 1, 1, 0, 0, 1], 
    [1, 1, 1, 0, 0, 1], 
    [1, 0, 0, 1, 0, 1], 
    [0, 1, 0, 1, 0, 1], 
    [1, 1, 0, 1, 0, 1], 
    [0, 0, 1, 1, 0, 1], 
    [1, 0, 1, 1, 0, 1], 
    [0, 1, 1, 1, 0, 1], 
    [1, 1, 1, 1, 0, 1]
]

# 1 + 5 + 2*(c(5,2)+c(5,3)+c(5,4)+1)= 58
Col_5 = [
    [0, 0, 0, 0, 0, 0, 0], 
    [1, 0, 0, 0, 0, 1, 0], 
    [0, 1, 0, 0, 0, 1, 0], 
    [1, 1, 0, 0, 0, 1, 0], 
    [0, 0, 1, 0, 0, 1, 0], 
    [1, 0, 1, 0, 0, 1, 0], 
    [0, 1, 1, 0, 0, 1, 0], 
    [1, 1, 1, 0, 0, 1, 0], 
    [0, 0, 0, 1, 0, 1, 0], 
    [1, 0, 0, 1, 0, 1, 0], 
    [0, 1, 0, 1, 0, 1, 0], 
    [1, 1, 0, 1, 0, 1, 0], 
    [0, 0, 1, 1, 0, 1, 0], 
    [1, 0, 1, 1, 0, 1, 0], 
    [0, 1, 1, 1, 0, 1, 0], 
    [1, 1, 1, 1, 0, 1, 0], 
    [0, 0, 0, 0, 1, 1, 0], 
    [1, 0, 0, 0, 1, 1, 0], 
    [0, 1, 0, 0, 1, 1, 0], 
    [1, 1, 0, 0, 1, 1, 0], 
    [0, 0, 1, 0, 1, 1, 0], 
    [1, 0, 1, 0, 1, 1, 0], 
    [0, 1, 1, 0, 1, 1, 0], 
    [1, 1, 1, 0, 1, 1, 0], 
    [0, 0, 0, 1, 1, 1, 0], 
    [1, 0, 0, 1, 1, 1, 0], 
    [0, 1, 0, 1, 1, 1, 0], 
    [1, 1, 0, 1, 1, 1, 0], 
    [0, 0, 1, 1, 1, 1, 0], 
    [1, 0, 1, 1, 1, 1, 0], 
    [0, 1, 1, 1, 1, 1, 0], 
    [1, 1, 1, 1, 1, 1, 0], 
    [1, 1, 0, 0, 0, 0, 1],  
    [1, 0, 1, 0, 0, 0, 1], 
    [0, 1, 1, 0, 0, 0, 1], 
    [1, 1, 1, 0, 0, 0, 1],  
    [1, 0, 0, 1, 0, 0, 1], 
    [0, 1, 0, 1, 0, 0, 1], 
    [1, 1, 0, 1, 0, 0, 1], 
    [0, 0, 1, 1, 0, 0, 1], 
    [1, 0, 1, 1, 0, 0, 1], 
    [0, 1, 1, 1, 0, 0, 1], 
    [1, 1, 1, 1, 0, 0, 1],  
    [1, 0, 0, 0, 1, 0, 1], 
    [0, 1, 0, 0, 1, 0, 1], 
    [1, 1, 0, 0, 1, 0, 1], 
    [0, 0, 1, 0, 1, 0, 1], 
    [1, 0, 1, 0, 1, 0, 1], 
    [0, 1, 1, 0, 1, 0, 1], 
    [1, 1, 1, 0, 1, 0, 1], 
    [0, 0, 0, 1, 1, 0, 1], 
    [1, 0, 0, 1, 1, 0, 1], 
    [0, 1, 0, 1, 1, 0, 1], 
    [1, 1, 0, 1, 1, 0, 1], 
    [0, 0, 1, 1, 1, 0, 1], 
    [1, 0, 1, 1, 1, 0, 1], 
    [0, 1, 1, 1, 1, 0, 1], 
    [1, 1, 1, 1, 1, 0, 1]
]

######## A_x,y,z & G_x-1,z & G_x+1,z-1 & B_x,y,z##############
## 2.  B_x,y,z = 1, if any of  A_x,y,z, G_x-1,z or G_x+1,z-1 is 1; [A,G,G,B]
# 8
A_to_B = [
    [0,0,0,0],
    [0,0,1,1],
    [0,1,0,1],
    [1,0,0,1],
    [0,1,1,1],
    [1,1,0,1],
    [1,0,1,1],
    [1,1,1,1]
]
# [A,B]
A_eq_B = [
    [0,0],
    [1,1]
]
######## C_x,y,z & A_x,y,z##############
## 3.  10100 -->10100 10110 11100 10101 11110 10111 11101 11111, 1 means var [C0 C1 C2 C3 C4 A0 A1 A2 A3 A4]
#      01010 -->01010 01011 01110 11010 01111 11011 11110 11111
#      00101 -->00101 10101 00111 01101 10111 11101 01111 11111
#      10010 -->10010 11010 10011 10110 11011 11110 10111 11111
#      01001 -->01001 01101 11001 01011 11101 01111 11011 11111
#      10000 -->10010 10000 10011 10001 
#      00001 -->00101 00001 00111 00011
#      00010 -->01010 00010 01110 00110
#      00100 -->10100 00100 11100 01100
#      01000 -->01001 01000 11001 11000
#      00000 -->00000
# 5 * 8 + 5 * 4 + 1 = 61

C_to_A = [
    [1,0,1,0,0,1,0,1,0,0],
    [1,0,1,0,0,1,0,1,1,0],
    [1,0,1,0,0,1,1,1,0,0],
    [1,0,1,0,0,1,0,1,0,1],
    [1,0,1,0,0,1,1,1,1,0],
    [1,0,1,0,0,1,0,1,1,1],
    [1,0,1,0,0,1,1,1,0,1],
    [1,0,1,0,0,1,1,1,1,1],
    [0,1,0,1,0,0,1,0,1,0],
    [0,1,0,1,0,0,1,0,1,1],
    [0,1,0,1,0,0,1,1,1,0],
    [0,1,0,1,0,1,1,0,1,0],
    [0,1,0,1,0,0,1,1,1,1],
    [0,1,0,1,0,1,1,0,1,1],
    [0,1,0,1,0,1,1,1,1,0],
    [0,1,0,1,0,1,1,1,1,1],
    [0,0,1,0,1,0,0,1,0,1],      
    [0,0,1,0,1,1,0,1,0,1],
    [0,0,1,0,1,0,0,1,1,1],
    [0,0,1,0,1,0,1,1,0,1],
    [0,0,1,0,1,1,0,1,1,1],
    [0,0,1,0,1,1,1,1,0,1],
    [0,0,1,0,1,0,1,1,1,1],
    [0,0,1,0,1,1,1,1,1,1],
    [1,0,0,1,0,1,0,0,1,0],       
    [1,0,0,1,0,1,1,0,1,0],
    [1,0,0,1,0,1,0,0,1,1],
    [1,0,0,1,0,1,0,1,1,0],
    [1,0,0,1,0,1,1,0,1,1],
    [1,0,0,1,0,1,1,1,1,0],
    [1,0,0,1,0,1,0,1,1,1],
    [1,0,0,1,0,1,1,1,1,1],
    [0,1,0,0,1,0,1,0,0,1],
    [0,1,0,0,1,0,1,1,0,1],
    [0,1,0,0,1,1,1,0,0,1],
    [0,1,0,0,1,0,1,0,1,1],
    [0,1,0,0,1,1,1,1,0,1],
    [0,1,0,0,1,0,1,1,1,1],
    [0,1,0,0,1,1,1,0,1,1],
    [0,1,0,0,1,1,1,1,1,1],
    [1,0,0,0,0,1,0,0,1,0],
    [1,0,0,0,0,1,0,0,0,0],
    [1,0,0,0,0,1,0,0,1,1],
    [1,0,0,0,0,1,0,0,0,1],
    [0,0,0,0,1,0,0,1,0,1],
    [0,0,0,0,1,0,0,0,0,1],
    [0,0,0,0,1,0,0,1,1,1],
    [0,0,0,0,1,0,0,0,1,1],
    [0,0,0,1,0,0,1,0,1,0],
    [0,0,0,1,0,0,0,0,1,0],
    [0,0,0,1,0,0,1,1,1,0],
    [0,0,0,1,0,0,0,1,1,0],
    [0,0,1,0,0,1,0,1,0,0],
    [0,0,1,0,0,0,0,1,0,0],
    [0,0,1,0,0,1,1,1,0,0],
    [0,0,1,0,0,0,1,1,0,0],
    [0,1,0,0,0,0,1,0,0,1],
    [0,1,0,0,0,0,1,0,0,0],
    [0,1,0,0,0,1,1,0,0,1],
    [0,1,0,0,0,1,1,0,0,0],
    [0,0,0,0,0,0,0,0,0,0] 
]

######## sim_C_x,y,z & A_x,y,z##############
## 3.  10100 -->10100 10110 11100 10101  , 1 means var [C0 C1 C2 C3 C4 A0 A1 A2 A3 A4]
#      01010 -->01010 01011 01110 11010 
#      00101 -->00101 10101 00111 01101 
#      10010 -->10010 11010 10011 10110 
#      01001 -->01001 01101 11001 01011 
#      10000 -->10010 10000 10001 
#      00001 -->00101 00001 00011
#      00010 -->01010 00010 00110
#      00100 -->10100 00100 01100
#      01000 -->01001 01000 11000
#      00000 -->00000
# 5 * 4 + 5 * 3 + 1 = 36
sim_C_to_A = [
    [1,0,1,0,0,1,0,1,0,0],
    [1,0,1,0,0,1,0,1,1,0],
    [1,0,1,0,0,1,1,1,0,0],
    [1,0,1,0,0,1,0,1,0,1],
    [0,1,0,1,0,0,1,0,1,0],
    [0,1,0,1,0,0,1,0,1,1],
    [0,1,0,1,0,0,1,1,1,0],
    [0,1,0,1,0,1,1,0,1,0],
    [0,0,1,0,1,0,0,1,0,1],      
    [0,0,1,0,1,1,0,1,0,1],
    [0,0,1,0,1,0,0,1,1,1],
    [0,0,1,0,1,0,1,1,0,1],
    [1,0,0,1,0,1,0,0,1,0],       
    [1,0,0,1,0,1,1,0,1,0],
    [1,0,0,1,0,1,0,0,1,1],
    [1,0,0,1,0,1,0,1,1,0],
    [0,1,0,0,1,0,1,0,0,1],
    [0,1,0,0,1,0,1,1,0,1],
    [0,1,0,0,1,1,1,0,0,1],
    [0,1,0,0,1,0,1,0,1,1],
    [1,0,0,0,0,1,0,0,1,0],
    [1,0,0,0,0,1,0,0,0,0],
    [1,0,0,0,0,1,0,0,0,1],
    [0,0,0,0,1,0,0,1,0,1],
    [0,0,0,0,1,0,0,0,0,1],
    [0,0,0,0,1,0,0,0,1,1],
    [0,0,0,1,0,0,1,0,1,0],
    [0,0,0,1,0,0,0,0,1,0],
    [0,0,0,1,0,0,0,1,1,0],
    [0,0,1,0,0,1,0,1,0,0],
    [0,0,1,0,0,0,0,1,0,0],
    [0,0,1,0,0,0,1,1,0,0],
    [0,1,0,0,0,0,1,0,0,1],
    [0,1,0,0,0,0,1,0,0,0],
    [0,1,0,0,0,1,1,0,0,0],
    [0,0,0,0,0,0,0,0,0,0]
]

# 5 * 8 = 40
two_C_to_A = [
    [1,0,1,0,0,1,0,1,0,0],
    [1,0,1,0,0,1,0,1,1,0],
    [1,0,1,0,0,1,1,1,0,0],
    [1,0,1,0,0,1,0,1,0,1],
    [1,0,1,0,0,1,1,1,1,0],
    [1,0,1,0,0,1,0,1,1,1],
    [1,0,1,0,0,1,1,1,0,1],
    [1,0,1,0,0,1,1,1,1,1],
    [0,1,0,1,0,0,1,0,1,0],
    [0,1,0,1,0,0,1,0,1,1],
    [0,1,0,1,0,0,1,1,1,0],
    [0,1,0,1,0,1,1,0,1,0],
    [0,1,0,1,0,0,1,1,1,1],
    [0,1,0,1,0,1,1,0,1,1],
    [0,1,0,1,0,1,1,1,1,0],
    [0,1,0,1,0,1,1,1,1,1],
    [0,0,1,0,1,0,0,1,0,1],      
    [0,0,1,0,1,1,0,1,0,1],
    [0,0,1,0,1,0,0,1,1,1],
    [0,0,1,0,1,0,1,1,0,1],
    [0,0,1,0,1,1,0,1,1,1],
    [0,0,1,0,1,1,1,1,0,1],
    [0,0,1,0,1,0,1,1,1,1],
    [0,0,1,0,1,1,1,1,1,1],
    [1,0,0,1,0,1,0,0,1,0],       
    [1,0,0,1,0,1,1,0,1,0],
    [1,0,0,1,0,1,0,0,1,1],
    [1,0,0,1,0,1,0,1,1,0],
    [1,0,0,1,0,1,1,0,1,1],
    [1,0,0,1,0,1,1,1,1,0],
    [1,0,0,1,0,1,0,1,1,1],
    [1,0,0,1,0,1,1,1,1,1],
    [0,1,0,0,1,0,1,0,0,1],
    [0,1,0,0,1,0,1,1,0,1],
    [0,1,0,0,1,1,1,0,0,1],
    [0,1,0,0,1,0,1,0,1,1],
    [0,1,0,0,1,1,1,1,0,1],
    [0,1,0,0,1,0,1,1,1,1],
    [0,1,0,0,1,1,1,0,1,1],
    [0,1,0,0,1,1,1,1,1,1]  
]

######## C_x,y,z & C_x+1,y,z############## 
## 4.  variables in C should not be adjacent
# 10100 01001 10010 00101 01010 [C0 C1 C2 C3 C4]
# 10000 00001 00010 00100 01000
# 00000
# 5 + 5 +1 = 11
C_indepent = [
    [1,0,1,0,0],
    [0,1,0,0,1],
    [1,0,0,1,0],
    [0,0,1,0,1],
    [0,1,0,1,0],
    [1,0,0,0,0],
    [0,1,0,0,0],
    [0,0,1,0,0],
    [0,0,0,1,0],
    [0,0,0,0,1],
    [0,0,0,0,0]
]

# 10100 01001 10010 00101 01010 [C0 C1 C2 C3 C4]
# 10000 00001 00010 00100 01000
# 5 + 5 = 10
sim_C_indepent = [
    [1,0,1,0,0],
    [0,1,0,0,1],
    [1,0,0,1,0],
    [0,0,1,0,1],
    [0,1,0,1,0],
    [1,0,0,0,0],
    [0,1,0,0,0],
    [0,0,1,0,0],
    [0,0,0,1,0],
    [0,0,0,0,1]
]

# 10100 01001 10010 00101 01010 [C0 C1 C2 C3 C4]
# 5 + 5 = 10
two_C_indepent = [
    [1,0,1,0,0],
    [0,1,0,0,1],
    [1,0,0,1,0],
    [0,0,1,0,1],
    [0,1,0,1,0]
]

##keccak sbox 32
CNF_value = [ 
    [1,0,0,0,0,1,0,0,1,0],
    [0,1,0,0,0,0,1,0,0,1],
    [1,1,0,0,0,1,1,0,1,0],
    [0,0,1,0,0,1,0,1,0,0],
    [1,0,1,0,0,0,0,1,1,0],
    [0,1,1,0,0,0,1,1,0,1],
    [1,1,1,0,0,1,1,1,1,0],
    [0,0,0,1,0,0,1,0,1,0],
    [1,0,0,1,0,1,1,0,0,0],
    [0,1,0,1,0,0,0,0,1,1],
    [1,1,0,1,0,1,0,0,0,0],
    [0,0,1,1,0,1,0,1,1,0],
    [1,0,1,1,0,0,0,1,0,0],
    [0,1,1,1,0,0,1,1,1,1],
    [1,1,1,1,0,1,1,1,0,0],
    [0,0,0,0,1,0,0,1,0,1],
    [1,0,0,0,1,1,0,1,0,1],
    [0,1,0,0,1,0,1,1,0,0],
    [1,1,0,0,1,1,1,1,0,1],
    [0,0,1,0,1,1,0,0,0,1],
    [1,0,1,0,1,0,0,0,0,1],
    [0,1,1,0,1,0,1,0,0,0],
    [1,1,1,0,1,1,1,0,0,1],
    [0,0,0,1,1,0,1,0,1,1],
    [1,0,0,1,1,1,1,0,1,1],
    [0,1,0,1,1,0,0,0,1,0],
    [1,1,0,1,1,1,0,0,1,1],
    [0,0,1,1,1,1,0,1,1,1],
    [1,0,1,1,1,0,0,1,1,1],
    [0,1,1,1,1,0,1,1,1,0],
    [1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,0]
    ]

#### active slice: 5 rows are the same or any 4 of 5 rows are the same, only one row is different with one bit
#### eg: 10000,10000,10000,10000,10000 or 11000,11000,11000,11000,10000
CNF_bFf = [
    [0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 1, 0],
    [0, 1, 0, 0, 0, 1, 0],
    [1, 1, 0, 0, 0, 1, 1],
    [0, 0, 1, 0, 0, 1, 0],
    [1, 0, 1, 0, 0, 1, 1],
    [0, 1, 1, 0, 0, 1, 1],
    [1, 1, 1, 0, 0, 1, 1],
    [0, 0, 0, 1, 0, 1, 0],
    [1, 0, 0, 1, 0, 1, 1],
    [0, 1, 0, 1, 0, 1, 1],
    [1, 1, 0, 1, 0, 1, 1],
    [0, 0, 1, 1, 0, 1, 1],
    [1, 0, 1, 1, 0, 1, 1],
    [0, 1, 1, 1, 0, 1, 1],
    [1, 1, 1, 1, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 0],
    [1, 0, 0, 0, 1, 1, 1],
    [0, 1, 0, 0, 1, 1, 1],
    [1, 1, 0, 0, 1, 1, 1],
    [0, 0, 1, 0, 1, 1, 1],
    [1, 0, 1, 0, 1, 1, 1],
    [0, 1, 1, 0, 1, 1, 1],
    [1, 1, 1, 0, 1, 1, 0],
    [0, 0, 0, 1, 1, 1, 1],
    [1, 0, 0, 1, 1, 1, 1],
    [0, 1, 0, 1, 1, 1, 1],
    [1, 1, 0, 1, 1, 1, 0],
    [0, 0, 1, 1, 1, 1, 1],
    [1, 0, 1, 1, 1, 1, 0],
    [0, 1, 1, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 0, 0]

]

CNF_FfS = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
    [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
    [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0],
    [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0],
    [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0],
    [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0],
    [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0],
    [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0],
    [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0],
    [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0],
    [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0],
    [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0],
    [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0],
    [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0],
    [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0],
    [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0],
    [0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
    [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0],
    [1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0],
    [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0],
    [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0],
    [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0],
    [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0],
    [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
    [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0],
    [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0],
    [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0],
    [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0],
    [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0],
    [1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0],
    [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0],
    [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0],
    [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
    [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0],
    [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0],
    [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0],
    [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0],
    [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0],
    [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
    [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0],
    [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0],
    [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0],
    [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0],
    [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0],
    [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0],
    [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0],
    [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0],
    [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0],
    [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0],
    [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0],
    [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0],
    [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],
    [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0],
    [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0],
    [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0],
    [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0],
    [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
    [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],
    [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0],
    [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0],
    [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0],
    [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0],
    [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0],
    [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0],
    [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0],
    [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0],
    [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0],
    [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0],
    [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0],
    [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0],
    [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0],
    [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0],
    [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0],
    [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0],
    [1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0],
    [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0],
    [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0],
    [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0],
    [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0],
    [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0],
    [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0],
    [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0],
    [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0],
    [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0],
    [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0],
    [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0],
    [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
    [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
    [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0],
    [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0],
    [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0],
    [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0],
    [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0],
    [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0],
    [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0],
    [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0],
    [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0],
    [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0],
    [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0],
    [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0],
    [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0],
    [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0],
    [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0],
    [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0],
    [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0],
    [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0],
    [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0],
    [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0],
    [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],
    [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],
    [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0],
    [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0],
    [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0],
    [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0],
    [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0],
    [1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0],
    [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
    [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
    [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0],
    [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0],
    [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0],
    [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0],
    [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]

]
######## Specify DDT ############## 
## 6.  [A0,A1,A2,A3,A4,B0,B1,B2,B3,B4] 
## 45 + 1
AtoB_ddt = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    [1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    [1, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    [0, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [1, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    [1, 0, 0, 1, 0, 1, 0, 0, 0, 0],
    [0, 1, 0, 1, 0, 0, 0, 0, 1, 0],
    [1, 1, 0, 1, 0, 1, 0, 0, 0, 0],
    [1, 1, 0, 1, 0, 0, 1, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 1, 0],
    [1, 0, 1, 1, 0, 0, 0, 1, 0, 0],
    [1, 0, 1, 1, 0, 0, 0, 0, 1, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 0, 0, 0, 1, 0, 0],
    [1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    [0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
    [1, 0, 1, 0, 1, 1, 0, 0, 0, 0],
    [1, 0, 1, 0, 1, 0, 0, 0, 0, 1],
    [0, 1, 1, 0, 1, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 1, 0, 0, 1, 0, 0],
    [1, 1, 1, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 1, 0, 0, 1, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0, 0, 1],
    [1, 0, 0, 1, 1, 1, 0, 0, 0, 0],
    [0, 1, 0, 1, 1, 0, 0, 0, 1, 0],
    [0, 1, 0, 1, 1, 0, 0, 0, 0, 1],
    [1, 1, 0, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 0, 1, 1, 0, 1, 0, 0, 0],
    [0, 0, 1, 1, 1, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 0, 0, 0, 0],
    [1, 0, 1, 1, 1, 0, 0, 0, 0, 1],
    [0, 1, 1, 1, 1, 0, 0, 0, 1, 0],
    [0, 1, 1, 1, 1, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 0, 0, 1, 0, 0],
    [1, 1, 1, 1, 1, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 0, 0, 0, 0, 1]
]

def Col_list(size:int)->list:
    # x = [i for i in product(range(2), repeat=11)]
    Q = [[0 for i in range(size + 1)] for i in range(2**size)]

    for value in range(2**size):
        for i in range(size):
            Q[value][i] = (value >> i) & 0x1
        if value in [15,31]:
            Q[value][size] = 1
        else:
            Q[value][size] = 0

    # new_Q = []
    # for q in Q:
    #     if not (q[0] == 0 and q[5] == 1) and not (q[1] == 0 and q[6] == 1)and not (q[2] == 0 and q[7] == 1)and not (q[3] == 0 and q[8] == 1)and not (q[4] == 0 and q[9] == 1):
    #         new_Q.append(q)

    return Q

def IntoList(size:int)->list:
    for Indiff in range(2**size):
        for Outdiff in range(2**size):
            Q = []
            if (Indiff,Outdiff) in [(1,1),(9,1),(11,1),(17,1),(21,1),(25,1),(27,1),(29,1),(31,1),(2,2),(3,2),(11,2),(18,2),(19,2),(22,2),(23,2),(27,2),(31,2),(4,4),(5,4),(6,4),(7,4),(13,4),(15,4),(22,4),(23,4),(31,4),(8,8),(10,8),(12,8),(13,8),(14,8),(15,8),(26,8),(30,8),(31,8),(16,16),(20,16),(21,16),(24,16),(26,16),(28,16),(29,16),(30,16),(31,16)]:
                for i in range(size):
                    Q.append((Indiff >> i) & 0x1)
                for i in range(size):
                    Q.append((Outdiff >> i) & 0x1)
                print(Q)


if __name__ == '__main__':
    """
    print("Col_2: [A0 A1 G D]")
    A0, A1,G,D = symbols('A0 A1 G D ')
    minterms = Col_2
    print(POSform([A0, A1,G,D], minterms))
    print("\n")

    print("Col_3: [A0 A1 A2 G D] ")
    A0, A1, A2,G,D = symbols('A0 A1 A2 G D')
    minterms = Col_3
    print(POSform([A0, A1, A2,G,D], minterms))
    print("\n")
        
    print("Col_4: [A0 A1 A2 A3 G D]")
    A0, A1, A2, A3,G,D = symbols('A0 A1 A2 A3 G D')
    minterms = Col_4
    print(POSform([A0, A1, A2, A3, G,D], minterms))  
    print("\n")  

    print("Col_5:[A0 A1 A2 A3 A4 G D] ")
    A0, A1, A2, A3, A4, G, D = symbols('A0 A1 A2 A3 A4 G D')
    minterms = Col_5
    print(POSform([A0, A1, A2, A3, A4, G,D], minterms))    
    print("\n")

    print("A_to_B: [A G0 G1 B ]")
    A, G0,G1,B = symbols('A G0 G1 B ')
    minterms = A_to_B
    print(POSform([A, G0,G1,B], minterms))
    print("\n")

    print("C_to_A: [C0 C1 C2 C3 C4 A0 A1 A2 A3 A4]")
    C0, C1,C2,C3, C4, A0,A1,A2,A3,A4 = symbols('C0 C1 C2 C3 C4 A0 A1 A2 A3 A4')
    minterms = C_to_A
    print(POSform([C0, C1,C2,C3, C4, A0,A1,A2,A3,A4], minterms))
    print("\n")
    
    print("C_indepent: [C0 C1 C2 C3 C4] ")
    C0, C1, C2, C3, C4 = symbols('C0 C1 C2 C3 C4')
    minterms = C_indepent
    print(POSform([C0, C1, C2, C3, C4], minterms))
    print("\n")
    
    Q = Col_list(5)
    print(Q)
    
    print("C_quar: [C0 C1 C2 C3 C4 Q] ")
    C0, C1, C2, C3, C4, Q= symbols('C0 C1 C2 C3 C4 Q')
    minterms = C_quar
    print(POSform([C0, C1, C2, C3, C4, Q], minterms))
    print("\n")
    
    
    print("Col_2_k: [A0 A1 D]")
    A0,A1,D = symbols('A0 A1 D ')
    minterms = Col_2_k
    print(POSform([A0,A1,D], minterms))
    print("\n")

    print("Col_3_k: [A0 A1 A2 D]")
    A0,A1,A2,D = symbols('A0 A1 A2 D ')
    minterms = Col_3_k
    print(POSform([A0,A1,A2,D], minterms))
    print("\n")

    print("Col_4_k: [A0 A1 A2 A3 D]")
    A0,A1,A2,A3,D = symbols('A0 A1 A2 A3 D ')
    minterms = Col_4_k
    print(POSform([A0,A1,A2,A3,D], minterms))
    print("\n")

    print("Col_5_k: [A0 A1 A2 A3 A4 D]")
    A0,A1,A2,A3,A4,D = symbols('A0 A1 A2 A3 A4 D ')
    minterms = Col_5_k
    print(POSform([A0,A1,A2,A3,A4,D], minterms))
    print("\n")
    """
    # Q = Col_list(5)
    # for i in Q:
    #     print(i)
    
    # IntoList(5)
    # print("BFf:[B0 B1 B2 B3 B4 F f] ")
    # B0, B1, B2, B3, B4, F, f = symbols('B0 B1 B2 B3 B4 F f')
    # minterms = CNF_bFf
    # print(POSform([B0, B1, B2, B3, B4, F, f], minterms))    
    # print("\n")

    # print("FfS:[F0 F1 F2 F3 F4 p0 p1 p2 p3 p4 S] ")
    # F0, F1, F2, F3, F4, p0, p1, p2, p3, p4, S = symbols('F0 F1 F2 F3 F4 p0 p1 p2 p3 p4 S')
    # minterms = CNF_FfS
    # print(POSform([F0, F1, F2, F3, F4, p0, p1, p2, p3, p4, S], minterms))    
    # print("\n")

    # print("AtoB_ddt: [ A0 A1 A2 A3 A4 B0 B1 B2 B3 B4]")
    # A0, A1, A2, A3, A4, B0, B1 ,B2, B3, B4 = symbols('A0 A1 A2 A3 A4 B0 B1 B2 B3 B4')
    # minterms = AtoB_ddt
    # print(POSform([A0, A1, A2, A3, A4, B0, B1 ,B2, B3, B4], minterms))
    # print("\n")
    print("Col_2: [A0 A1 G D]")
    A0, A1,G,D = symbols('A0 A1 G D ')
    minterms = Col_2
    print(POSform([A0, A1,G,D], minterms))
    print("\n")